"""Лабораторная работа № 9. Обработка данных в Pandas, визуализация данных. """

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""Цель лабораторной работы - изучить основы работы с библиотеками Pandas для работы с данными. """

"""Задачи лабораторной работы:
1.Освоить принципы создания объекта Series библиотеки Pandas и основные его методы.
2.Освоить принципы создания объекта DataFrame библиотеки Pandas и основные его методы.
Научиться визуализировать данные с помощью встроенных функций библиотеки Pandas."""

"""Ход работы:"""

"""Библиотека Pandas служит для работы с данными на языке Python и осуществлять манипуляции над ними.
Основными структурными данными этой библиотеки являются Series (последовательности) и DataFrame (Табличные данные).
Без представления об этих структурных данных (классах) невозможно эффективно работать с данной библиотекой.
1.Структура Series - это объект, представляющий собой одномерный массив (как Python список, например).
Основным отличием является наличие ассоциированных меток, т.н. индексов, вдоль каждого элемента из списка.
Такая особенность превращает его в ассоциативный массив или словарь в Python."""

"""1.1. Для работы с библиотекой Pandas необходимо ее импортировать в код. """

"""1.2. Создание последовательности Series производиться методом Series() класса pandas.
Создадим последовательность чисел 1, 2, 3, 4, 8, 10 и выведем ее на экран. """

my_series = pd.Series([1,2,3,4,8,10])
print(my_series.values)


"""1.3. Доступ к элементам этой последовательности можно получить через индексы этой последовательности.
Название индексов хранятся в атрибутах класса этой последовательности.  Значение элементов называют value, а название нумерации элемента index.
Выведем значение индексов созданной последовательности с помощью кода: """

print(list(my_series.index))

"""1.4. Вызовем значение элемента 4 используя индекс. """

print(my_series[4])

"""1.5. Важной опцией задавать любые названия индексам, что невозможно делать в типе данных список. Переназовем индексы созданной последовательности чисел """

my_series2 = pd.Series([5, 6, 7, 8, 9, 10], index=['a', 'b', 'c', 'd', 'e', 'f'])

print(list(my_series2.index))
print(my_series2['f'])

"""1.7. При работе с данными, часто возникает необходимость выводить или получать доступ к нескольким элементам данным. """

print(my_series2[['a', 'b', 'f']])

"""Также можно изменять данные массива:"""

my_series2[['a', 'b', 'f']] = 0
print(my_series2[['a', 'b', 'f']])

"""Вывод данных может осуществляться не только по значениям индекса,
но и по логическим выражениям, например, чтобы вывести значения последовательности больше определенного значения"""

print(my_series2[my_series2 > 0])

"""Проверка наличия индекса или элемента в последовательности можно проверить с помощью оператора in следующим образом """

print('d' in my_series2)

"""1.8. Дополнительным отличием последовательности Pandas от списка и словаря Python - это возможность присваивать имена
столбцам индексов и значений. Их значения хранится в атрибуте name. Вызовем текущие название столбцов индексов и значений и затем переназначим им имена"""

print(my_series2.name)
print(my_series2.index.name)
my_series2.name = 'My index'
my_series2.index.name = 'My values'
print(my_series2)

"""1.9. Индексация Python списков ведется с нулевого значения. Это можно изменить в последовательностях Pandas.
Единственное нужно помнить, что количество имен для переназначения должно совпадать с количеством элементов (индексов)."""

my_series2.index = [1,2,3,4,5,6]
print(my_series2)

"""2.Структура данных DataFrame лучше всего отображает табличные данные. Любая таблица имеет строки и столбцами.
В роли столбцов выступают последовательности типа данных Series.

2.1. Создать тип данных DataFramaes можно из объекта словарь с помощью метода класса DataFrmae().
Создать таблицу стран с самыми популярными марками автомобилей их стоимостью и популяцией людей."""

df = pd.DataFrame({'country':['Russia', 'Germany,', 'England'], 'population':[145, 80, 100], 'car': ['Lada', 'BMW', 'AM'], 'cost': [10000, 20000, 200000]})

"""Выведем построенную таблицу данных и убедимся, что столбец имеет тип последовательность. """

print(df)
print(df['car'])

"""2.2. Объект DataFrame имеет 2 индекса: по строкам и по столбцам. Если индекс по строкам явно не задан
(например, колонка по которой нужно их строить), то pandas задаёт целочисленный индекс RangeIndex от 0 до N-1, где N это количество строк в таблице."""

print(df.index)

"""2.3. Название индексов можно изменить в любой момент точно также как в случае с типом данных Series: """

df.index = ['RU', 'GE', 'UK']
print(df.index)

"""2.4. Доступ к строкам по индексу возможен несколькими способами:

●loc - используется для доступа по строковой метке
●iloc - используется для доступа по числовому значению (начиная от 0)"""

print(df.loc['RU'])
print(df.iloc[1])

"""Также можно делать выборку по индексам b фильтровать с помощью логических выражений: """

print(df.loc[['GE', 'RU'], 'population'])
print(df[df.population > 10][['country']])

"""2.5. В структуру данных DataFrame можно добавить дополнительный столбец с помощью присваивания какого-либо значения к этой таблице с новым ключом. """


df['new_data'] = df['population'] / df['cost'] * 1000000
print(df['new_data'])

"""2.6. Также этот столбец можно удалить с помощью метода drop()"""

print(df.drop(['new_data'], axis='columns'))

"""3.Представление данных в табличном виде удобно для хранения и манипуляции, но представление этих данных нагляднее
с помощью визуальных инструментов, например графиков. Для этих целей в библиотеке встроены инструменты представления данных с помощью одномерного графика."""

"""3.1. Построим одномерный график наших данных:"""

df.plot()
my_series2.plot()

"""3.2. Можно задать конкретно что хотим строить по оси y и x для этого в функции plot() задаем аргументы x и y в виде листа названий столбцов."""

df.plot(y=['population','cost'])
plt.show()

"""3.3. Часто пользователю не требуется строить просто линейный график, а например, гистограмму или круговую диаграмму.
Это можно осуществить если поменять значение аргумента kind метода plot на значения

●bar для вертикальной гистограммы;
●barh для горизонтальной гистограммы;
●box для графиков с боксами;
●hexbin для шестнадцатеричных графиков;
●hist для гистограмм;
●line для линейных графиков;
●pie для круговых графиков;
●scatter для графиков рассеяния."""

"""Построить любой тип графика из перечисленных выше. """

df.plot(y='population', kind='barh')
plt.show()

"""Самостоятельная работа"""

"""1. Создать таблицу"""

table = pd.DataFrame({'Brand':['Acura', 'Alfa Romeo', 'Audi', 'BMW', 'Buick', 'Cadillac', 'Chevrolet', 'Chrysler', 'Dodge'],
                      'Month':[12941, 1707, 16173, 22523, 16599, 11131, 151656, 10761, 24290],
                      'LY':[11098, 1304, 16130, 24767, 15317, 12093, 153107, 8940, 31517],
                      'Change':[16.61, 30.90, 0.27, -18.00, 8.37, -7.96, -0.95, 20.37, -22.93],
                      'YTD':[95653, 12493, 124106, 181547, 118561, 86586, 1209044, 75671, 204347],
                      'YTD Last Year':[112813, 13347, 158471, 232426, 157852, 115697, 1444539, 93966, 332245],
                      'YTD Change':[-15.21, -6.40, -21.69, -21.89, -24.89, -25.16, -16.30, -19.47, -38.50],
                      'Month Share': [0.81, 0.11, 1.01, 0.40, 1.03, 0.69, 0.44, 0.67, 0.51],
                      'YTD Share':[0.55, 0.07, 0.72, 1.05, 0.69, 0.50, 7.01, 0.44, 1.19]})
#print(table)

"""2. Записать в таблицу новую переменную new_table с отсортированными данными по увеличению Month share """

new_table = np.array(table['Month Share'])
new_table.sort()
table['new_table'] = new_table
#print(table)

"""3. Переменную new_table отсортировать по алфавиту бренда машины"""

#table['new_table'].sort_values(by='Brand')
#print(table)

"""Бренд машины в таблице уже отсортирован по алфавиту, после сортировки ничего не изменилось"""

"""4. Вычислить максимальные, минимальные и средние значения каждого показателя"""

table = table.reindex(range(12))
table['Brand'][9] = 'Average'
table['Brand'][10] = 'Minimum'
table['Brand'][11] = 'Maximum'


for i in range(1, len(list(table.columns))):
    table[list(table.columns)[i]][9] = table[list(table.columns)[i]].mean()
    table[list(table.columns)[i]][10] = table[list(table.columns)[i]].min()
    table[list(table.columns)[i]][11] = table[list(table.columns)[i]].max()

new_index = list(table['Brand'])
print(new_index)

"""5. Сделать таблицу с индексами брэнда машины. Заменить цифры названиями брендов. Это можно сделать командой reindex"""

table.index = list(table['Brand'])
table = table.drop(columns='Brand')
print(table)






