# initial_gen.py
import networkx as nx

"""С генерацией в 6 узле. Для построения новых графов при автономной работе P6"""

"""СШ1 + СШ2 

Схема с двумя секциями шин. P6 питается автономно"""

"""Параметры для линий, после нахождения всех графов, даём им вес и атрибуты"""
param_edges_G_2_gen = {(0, 1): {'resistance': 1.2},
                       (1, 2): {'resistance': 0.9},
                       (1, 5): {'resistance': 0.0},
                       (2, 3): {'resistance': 0.6},
                       (2, 6): {'resistance': 0.0},
                       (6, 5): {'resistance': 0.6},
                       (5, 4): {'resistance': 1.2}}

"""Задаем парамтеры узлов. Нужно помнить про нумерацию узлов и потребителей 1-P1 2-P3 3-P5"""
param_nodes_G_2_gen = [[0, dict(power=0)], [1, dict(power=504)],
                       [2, dict(power=752)], [3, dict(power=964)],
                       [4, dict(power=0)], [5, dict(power=576)], [6, dict(power=988)]]

G_2_gen = nx.Graph()  # Создаем объект для графа

"""Задание ребер и узлов для начального графа и расчёте на его основе остовных деревьев"""
nodes_G_2_gen = [0, 1, 2, 3, 4, 5, 6]
edges_G_2_gen = ((0, 1), (1, 2), (1, 5), (2, 3), (2, 6), (6, 5), (5, 4))
"""Фиксация положений точек для отображения нормального графа"""
positions_G_2_gen = {0: [0.0, 1.0], 1: [1.0, 1.0], 2: [2.0, 1.0], 3: [3.0, 1.0],
                     4: [0.0, 0.0], 5: [1.0, 0.0], 6: [2.0, 0.0]}

G_2_gen.add_nodes_from(nodes_G_2_gen)
G_2_gen.add_edges_from(edges_G_2_gen)

"""Для отображения результатов расчётов в Dataframe задаем словари наименований"""

# Словарь наименований узлов
node_names_G_2_gen = {0: 'СШ1', 1: 'P1', 2: 'P3', 3: 'P5',
                      4: 'СШ2', 5: 'P2', 6: 'P4', }

# Словарь наименований ребер
line_names_G_2_gen = {(0, 1): "Л1", (1, 0): "Л1",
                      (1, 2): "Л3", (2, 1): "Л3",
                      (2, 3): "Л5", (3, 2): "Л5",
                      (2, 6): "Q8", (6, 2): "Q8",
                      (6, 5): "Л4", (5, 6): "Л4",
                      (5, 1): "Q7", (1, 5): "Q7",
                      (5, 4): "Л2", (4, 5): "Л2"}

"""Питание от СШ1"""

"""Параметры для линий, после нахождения всех графов, даём им вес и атрибуты"""
param_edges_G_1_1_gen = {(0, 1): {'resistance': 1.2},
                         (1, 2): {'resistance': 0.9},
                         (1, 4): {'resistance': 0.0},
                         (2, 3): {'resistance': 0.6},
                         (2, 5): {'resistance': 0.0},
                         (5, 4): {'resistance': 0.6}}

"""Задаем парамтеры узлов. Нужно помнить про нумерацию узлов и потребителей 1-P1 2-P3 3-P5"""
param_nodes_G_1_1_gen = [[0, dict(power=0)], [1, dict(power=504)], [2, dict(power=752)], [3, dict(power=964)],
                         [4, dict(power=576)], [5, dict(power=988)]]

G_1_1_gen = nx.Graph()  # Создаем объект для графа

"""Задание ребер и узлов для начального графа и расчёте на его основе остовных деревьев"""
nodes_G_1_1_gen = [0, 1, 2, 3, 4, 5]  # Добавляем узлы
edges_G_1_1_gen = ((0, 1), (1, 2), (1, 4), (2, 3), (2, 5), (5, 4))  # Перечень ребер для добавления в граф

"""Фиксация положений точек для отображения нормального графа"""
positions_G_1_1_gen = {0: [0.0, 1.0], 1: [1.0, 1.0], 2: [2.0, 1.0], 3: [3.0, 1.0],
                       4: [1.0, 0.0], 5: [2.0, 0.0]}  # Фиксированные позиции для точек графа

G_1_1_gen.add_nodes_from(nodes_G_1_1_gen)
G_1_1_gen.add_edges_from(edges_G_1_1_gen)

# Словарь наименований узлов
node_names_G_1_1_gen = {0: 'СШ1', 1: 'P1', 2: 'P3', 3: 'P5', 4: 'P2', 5: 'P4'}

# Словарь наименований ребер
line_names_G_1_1_gen = {(0, 1): "Л1", (1, 0): "Л1",
                        (1, 2): "Л3", (2, 1): "Л3",
                        (2, 3): "Л5", (3, 2): "Л5",
                        (2, 5): "Q8", (5, 2): "Q8",
                        (5, 4): "Л4", (4, 5): "Л4",
                        (4, 1): "Q7", (1, 4): "Q7"}


"""Питание от СШ2"""

param_edges_G_1_2_gen = {(0, 1): {'resistance': 0.9},
                         (0, 4): {'resistance': 0.0},
                         (1, 2): {'resistance': 0.6},
                         (1, 5): {'resistance': 0.0},
                         (5, 4): {'resistance': 0.6},
                         (4, 3): {'resistance': 1.2}}

"""Задаем парамтеры узлов"""

param_nodes_G_1_2_gen = [[0, dict(power=504)], [1, dict(power=752)], [2, dict(power=964)],
                         [3, dict(power=0)], [4, dict(power=576)], [5, dict(power=988)]]

G_1_2_gen = nx.Graph()  # Создаем объект для графа

nodes_G_1_2_gen = [0, 1, 2, 3, 4, 5]  # Добавляем узлы
edges_G_1_2_gen = ((0, 1), (0, 4), (1, 2), (1, 5), (5, 4), (4, 3))  # Перечень ребер для добавления в граф

"""Фиксация положений точек для отображения нормального графа"""
positions_G_1_2_gen = {0: [1.0, 1.0], 1: [2.0, 1.0], 2: [3.0, 1.0],
                       3: [0.0, 0.0], 4: [1.0, 0.0], 5: [2.0, 0.0]}  # Фиксированные позиции для точек графа

G_1_2_gen.add_nodes_from(nodes_G_1_2_gen)
G_1_2_gen.add_edges_from(edges_G_1_2_gen)

# Словарь наименований узлов
node_names_G_1_2_gen = {0: 'P1', 1: 'P3', 2: 'P5', 3: 'СШ2', 4: 'P2', 5: 'P4'}

# Словарь наименований ребер
line_names_G_1_2_gen = {(0, 1): "Л3", (1, 0): "Л3",
                        (1, 2): "Л5", (2, 1): "Л5",
                        (3, 4): "Л2", (4, 3): "Л2",
                        (4, 5): "Л4", (5, 4): "Л4",
                        (0, 4): "Q7", (4, 0): "Q7",
                        (5, 1): "Q8", (1, 5): "Q8"}
