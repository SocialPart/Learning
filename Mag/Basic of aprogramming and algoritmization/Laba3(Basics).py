"""Задача 1. Написать код для решения задачи цепи постоянного тока. Сделать
проверку решения с помощью логических выражений на основе баланса
мощностей."""

import math as ma
import numpy as np
import matplotlib.pyplot as plt

# R1 = 10 #Закомментил задачу целиком, чтобы не переопределялись перемнные в следующих задачах
# r1 = 0.01
# E1 = 10
# I1 = E1/(r1+R1)
# U_source = I1 * r1
# U_load = I1 * R1
# print('Ток в цепи =',I1,'Напряжение на источнике = ' , U_load,'Напряжение на нагрузке = ',U_source)
# P_source = I1 * E1
# deltaP1 = I1 * r1 #Потери на источнике
# deltaP2 = I1 * R1 #Потери на приемнике
# deltaP = deltaP1 + deltaP2
# print(round(deltaP, 1), round(P_source, 1))
# tester = round(deltaP)==round(P_source) #Проверим сходимость по балансу мощностей
# print('My calculation is ', tester)



"""Задача 2. Написать код для решения задачи цепи переменного тока,
используя комплексные значения. Сделать проверку решения с помощью
логических выражений на основе баланса мощностей"""


# Задаем начальные условия
# E1 = 100 # ЭДС источника
# f1 = 50 # Частота
# omega1 = 2 * ma.pi * f1 #Угловая частота
# R1 = 50 #Активное сопротивление
# L1 = 1e-4 #Индуктивность
# C1 = 5e-5 #Ёмкость
# X_L = omega1 * L1 #Индуктивное сопротивление
# X_C = 1/(omega1 * C1) #Ёмкостное сопротивление
# Z1 = complex(R1, (X_L - X_C)) #Полное сопротивление
# print(Z1)

# Расчёт тока в цепях переменного тока

# I1 = E1 / Z1
# print(I1)

# Расчёт мощностей в цепях переменного тока

# S_source = E1 * I1
# S_load = I1 ** 2 * Z1
# print(S_source)
# print(S_load)

#  Расчёт коэффициента мощности

# power_factor = ma.cos(S_load.real/abs(S_load))
# print(power_factor)



"""Рассчитать цепь переменного тока, используя мгновенные
значения тока и напряжения с помощью типа переменных массив. Построить
основные характеристики"""



t = np.arange(0,0.1,0.001)
f1 = 50
r1 = 10
u_max = 220
e = u_max * np.cos(2 * f1 * t)
plt.plot(t,e)


i = e / r1
plt.plot(t,i)


power = e * i
plt.plot(t, power)
plt.show()



t = [0]
while t[len(t)-1] != 10 and t[len(t)-1] < 10:
    t.append(t[len(t)-1]+0.01)
f1 = 50
r1 = 10
u_max = 220
e = u_max * ma.cos(2 * f1 * t)
plt.plot(t,e)
plt.show()


