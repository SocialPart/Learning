'''Лабораторная работа No 5. Тестирование и поиск ошибок в
коде. Практика использования команд try, except.
Проверка зацикливания алгоритма'''

from sys import exit

"""Цель работы - научиться реализовывать базовый функционал Python для решения
задач электротехники с помощью написания алгоритмов.
Задачи:

Задача 1. Написать код для решения задачи цепи постоянного тока. Сделать
проверку решения с помощью логических выражений на основе баланса мощностей.

Задача 2. Написать код для решения задачи цепи переменного тока, используя
комплексные значения. Сделать проверку решения с помощью логических
выражений на основе баланса мощностей.

Задача 3. Расчитать цепь переменного тока, используя мгновенные значения тока и
напряения с помощью типа перменных массив. Построить основные характеристики.

Зацикливание алгоритма - это бесконечное выполнение инструкции кода,
возникающая из-за постонно истинного выражения в циклах. Важно избгать этого в
программах или создавать конструкции, которые отключат зацикливание. Одним из
возможных решений является использование оператора break
"""

"""Создать код с зацикливанием цикла while."""

test = True
stop = 10
i = 0
while test:
    print("I am working")
    i += 1
    # if i == stop:  #Пока требуется просто зациклить
    #     break

'''Создать код с зацикливанием с использованием цикла for'''
my_list = [1,2]

for i in my_list:
    my_list.append(i)
    print('hi')

'''Создать инструмент для избегания зацикливания с помощью достижения
максимального количества итераций'''

test = True
stop = 10
i = 0

while test:
    print("I am working")
    i+=1
    if i == stop:
        break

"""Создаем такой же инструмент для цикла for"""

my_list = [1, 2]
stop = 4
i = 0
for value in my_list:
    my_list.append(i)
    print("I am working")
    i+=1
    if i == stop:
        break

"""Создаем инструмент с помощью выполнения кода и функции sys.exit()"""

my_list = [1, 2]
stop = 4
i = 0
for value in my_list:
    my_list.append(i)
    print("I am working")
    i+=1
    if i == stop:
        exit()

"""Разработать программу прверки деления на ноль. 
1) Написать выражение с делением на ноль
2) Перехватить эту ошибку с помощью операций try и except
3) Добавить нструкцию в эту программу, которая будет выполняться в любом случае."""

a = 5.0
b = 0
print(a/b)

try:
    a/b
except ZeroDivisionError:
    print("Делить на ноль не хорошо!")


try:
    a/b
except ZeroDivisionError:
    print("Делить на ноль не хорошо!")


a = 1
b = 5
try:
    a/b
except ZeroDivisionError:
    print("Делить на ноль не хорошо!")

else:
    print(a/b)

finally:
    print('Ты сделал проверку кода! Я бы появился в любом случае')

"""Написать программу проверки четного числа, причем введенное число должно быть только четным. Проверку реализовать с помощью функций try и except."""

n = input("Введите целое число: ")

while type(n) != int:
    try:
        n = int(n)
    except ValueError:
        print("Неправильно ввели!")
        n = input("Введите целое число: ")

if n % 2 == 0:
    print("Четное")
else:
    print("Нечетное")

"""Напишите программу? которая работает пока пользователь не введет число."""

while True:
    try:
        data = float(input("Введите число "))
        break
    except ValueError:
        print("Это не число")