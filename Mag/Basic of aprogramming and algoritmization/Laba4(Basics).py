"""Лабораторная работа № 4. Использование простых и сложных циклов для реализации математических расчетов."""

import math as ma
import matplotlib.pyplot as plt

"""Цель работы - научиться реализовывать базовый функционал Python для решения задач электротехники с помощью написания алгоритмов.

Задачи:

Задача 1. Написать код для решения задачи цепи постоянного тока. Сделать проверку решения с помощью логических выражений на основе баланса мощностей.

Задача 2. Написать код для решения задачи цепи переменного тока, используя комплексные значения. Сделать проверку решения 
с помощью логических выражений на основе баланса мощностей.

Задача 3. Расчитать цепь переменного тока, используя мгновенные значения тока и напряения с помощью типа перменных массив. Построить основные характеристики."""


"""Функции range, enumerate и zip"""

"""Функция range() часто используется в циклах для создания последовательности количества итераций. Основное назначение функции - 
это создать последовательность целых чисел. Для этого необходимо вызвать функцию range(start, stop, step) и задать первое значение диапазона start, 
последнее значение stop и шаг step. Функция принимает только целые числа в качестве аргументов. Можно вызвать функцию с одним аргументом range(stop), 
тогда она создаст диапазон чисел от нуля до stop шагом 1. Другой вариант - это задать только начало start и конец диапазона stop, тогда шаг будет 1. 
Можно создавать последовательности чисел в убывающем порядке с помощью отрицательного шага. Для этого используют следующие определения в функциях ragnge() :

Инкрементация (прямая последовательность) - увеличение значений диапазона с увеличением порядкого номера.
Декрементация (обратная последовательность) - снижение значений диапазона с увеличением порядкого номера.

Назначение range():
•Выполнении тела цикла определенное количество раз
•Создание более эффективных итераций целых чисел, которое может быть выполнено при помощи списков или кортежей.
Созадть диапазон чисел от 0 до 10;
Создать диапазон чисел от 1 до 10;
Создать диапазон чисел от -3 до 10 с шагом 3;
Создать диапазон чисел от 20 до -5 с шагом.
Вывести этипоследовательности на экран"""

range1 = range(10)
range2 = range(1, 10)
range3 = range(-3, 10, 3)
range4 = range(20, -5, -2)
print(range1)
print(range2)
print(range3)
print(range4)

"""Вывести элементы диапазона на экран."""

print(list(range1[:]))
print(list(range2[2:]))
print(list(range4))

"""Создать диапазон индексов списка."""

myList = [1,2, 3, 5, 10]
index = range(len(myList))
print(list(index))

"""Цикл for"""

"""Цикл for предназначен для создания прохода по итерируемому объекту. Этот цикл всегда используется в связке с оператором in.

for element in iter_object:
  тело цикла
  
element - название переменной, хранящая текущее значение переменной (объекта) iter_object. 
iter_object - итерируемый объект по которому происходит создание цикла и выборка итераций. 
Тело цикла - это код, который будет выполнен в этом цикле. 

Тело цикла должно иметь сдвиг на четыре пробела или одну табуляцию от оператора if.

Построить график синусоидального напряжения со значение  В, используя типы переменных Python список. 
Для этого необходимо создать два списка данных времени и значений напряжения в каждый момент времени. Частота питания сети 50 Гц."""

step_time = 0.001
nPoints = 50
u_max = 220
f1 = 50
timeList = []
valueList = []

for index in range(nPoints):
    timeList.append(step_time * index)
    valueList.append(ma.cos(2*ma.pi*f1*timeList[index]))

plt.plot(timeList, valueList)
plt.show()

"""Создать цикл, который переводи температуру из градусов Цельсия в Фарингейты и Кельвины. 
Вывести табличку на экран."""

"""T_k = T_c + 273.15
T_f = 9/5 * T_c +32"""

T_c = list(range(-50, 50, 5))
T_k = []
T_f = []
print('Temperature', 'C', 'K', 'F')

for T in T_c:
    T_k.append(T + 273.15)
    T_f.append(9/5 * T + 32)
    print(T_c, T_k, T_f)

"""Реализовать этот цикл с использованеие счетчика i+=1 для вычисления номера итерации и порядка в листе."""

print('C', 'K', 'F')
i = 0

for T in T_c:
    T_k.append(T+273.15)
    T_f.append(9.0/5 *T +32)
    print(T_c[i], round(T_k[i], 2), T_f[i])
    i+=1

print('C', 'K', 'F')

for index in range(len(T_c)):
    T_k.append(T_c[index]+273.15)
    T_f.append(9.0/5 * T_c[index] +32)
    print(T_c[index], round(T_k[index], 2), T_f[index])

"""Вместо использование счетчика i и range, использовать функцию enumerate. 
Функция enumerate является аналогом функции range, только возвращает не только индексы, но и его значения"""

print('C', 'K', 'F')

for index, value in enumerate(T_c):
    T_k.append(value+273.15)
    T_f.append(9.0/5 * value +32)
    print(value, round(T_k[index], 2), T_f[index])

"""Компактная запись"""

my_printer = [print((value, round(9/5* value+ 32,2), round(9.0/5 * value +32, 2))) for value in T_c]

"""Компактная запись с помощью функции zip(). Функция zip() позволяет проходить по нескольким спискам (итерируемым объектам одновременно). 
Функция zip(lists) принимает в качестве аргументов набор итерируемых переменных, например, списков, словарей, строк, а возвращает специальный zip объект, 
состоящий из кортежей. Этот кортеж состоит из элементов поданных списков-аргументов в порядке упоминания их в функции. 
Если итеративные переменные имеют различную длину, функция zip() создаст объект, длина которого будет равна меньшему списку."""

T_k = [round(value + 273.15, 2) for value in T_c]
T_f = [round(9/5 * value + 32, 2) for value in T_c]

for current_val in zip(T_c, T_k, T_f):
    print(current_val)

for Tc, Tk, Tf in zip(T_c, T_k, T_f):
    print(Tc, Tk, Tf)

list1 = [1,2,3, 5]
list2 = [2,3,4]

for test in zip(list1, list2):
    print(test)


"""Цикл с while"""

"""while logical_expression:
  body_loop

else: 
  этот код будет выполнен один раз после окончания"""

stop = 4
start = 0
cur_val = 1
cur_num = 1

while cur_num!=(stop):
    cur_num += 1
    cur_val *= cur_num
    print('It is current the number', cur_num)
    print('It is current the value', cur_val)
else:
    print('I have calculated ', cur_val)

"""Цикл If и его ветвления"""

"""Синтасис простого цикла if

if logical_expression:
    body_loop
    
logical_expression - логическое выражение, если оно верное, выполняется код body_loop

Иногда требуется более сложная проверка логических выражений. Для этого существует ветвление цикла if, такие как elif и else.

if logical_expr1:
    <code1>
elif logical_expr2:
    <code2>
....
elif logical_exprn:
    <codeN>
else:
    <codeN+1>"""

"""Расчет цепи постоянного тока. Дано: параметры источника питания  В со внутреним сопротивлением  Ом , и параметры приемника сопротивлением $ R_1 = 10 Ом $. 
Источник и приемник включены последовательно. Расчитать ток в цепи, падаение напряжения на источник и приемнике, выделяемая мощность на приемнике. 
Проверить результаты с помощью баланса мощностей."""

R1 = 10
r1 = 0.01
E1 = 10
I1 = E1/(r1+R1)
U_source = I1 * r1
U_load = I1 * R1

print("Ток в цепи ", I1, ", напряжение на источнике ", U_source, ' напряжение на приемнике', U_load)

P_source = I1*E1
deltaP1 = I1*r1 # потери на источнике
deltaP2 = I1*R1 # потери на приемнике
deltaP = deltaP1 + deltaP2
print(round(deltaP, 1), round(P_source, 1))

tester = round(deltaP) == round(P_source)
if tester == True:
    print('Wow I ahve solved it correctly')

"""Напишем сложную функцию и построим ее."""

"""f(x) = exp(2x), for x < 0 \\
f(x) = 3x, for 0<=x<20 \\
f(x) = x^2 for 20<=x<100 \\
f(x) = ln(x) else"""

x = list(range(-30,200, 2))
value = []
for xi in x:
    if xi<0:
        value.append(ma.exp(2 * xi))
    elif xi>=0 and xi<20:
        value.append(3*xi+300)
    elif xi<=20 and xi<100:
        value.append(xi**2)
    else:
        value.append(ma.log(xi)+300)

plt.plot(x, value)
plt.show()
